import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';
import { QueryClientProvider, QueryClient } from "react-query";
import { ReactQueryDevtools } from "react-query/devtools";
import loadable from '@loadable/component';
import pMinDelay from 'p-min-delay';
import { LoadingOverlay } from '@bubbles-ui/components';
import "./global.css";

// Plugins imports
{{ @each(it.plugins) => plugin }}
{{ @if(plugin.routers.public) }}
const {{ plugin.name | clear | capitalize }}Public = loadable(() => pMinDelay(import('@{{ plugin.name }}/../Public'), 1000));
{{ /if }}
{{ @if(plugin.routers.private) }}
const {{ plugin.name | clear | capitalize }}Private = loadable(() => pMinDelay(import('@{{ plugin.name }}/../Private'), 1000));
{{ /if }}
{{ @if(plugin.hooks) }}
import use{{ plugin.name | clear | capitalize }} from '@{{ plugin.name }}/../globalHooks';
{{ /if }}
{{ @if(plugin.globalContext) }}
import { Provider as {{ plugin.name | clear | capitalize }}GlobalProvider } from '@{{ plugin.name }}/../globalContext';
{{ /if }}
{{ @if(plugin.localContext && (plugin.routers.public || plugin.routers.private)) }}
import { Provider as {{ plugin.name | clear | capitalize }}LocalProvider } from '@{{ plugin.name }}/../localContext';
{{ /if }}
{{ /each }}

const queryClient = new QueryClient();

function ReactQueryDevtoolsWrapper() {
  if (process.env.NODE_ENV === "production") {
    return null;
  }

  const [showQueryDevtools, setShowQueryDevtools] = useState(window.localStorage.getItem('showReactQueryDevTools'));

  useEffect(() => {
    window.toogleQueryDevtools = (persist) => setShowQueryDevtools((s) => {
      if (persist) {
        window.localStorage.setItem('showReactQueryDevTools', !s);
      }
      return !s
    });
  }, [setShowQueryDevtools]);

  if (showQueryDevtools) {
    return <ReactQueryDevtools initialIsOpen={false} />;
  }

  return null;
}

function App() {
  // Plugins hooks
{{ @each(it.plugins) => plugin }}
{{ @if(plugin.hooks) }}
  use{{ plugin.name | clear | capitalize }}();
{{ /if }}
{{ /each }}
  return (
    <QueryClientProvider client={queryClient}>
      <Router>
{{ @each(it.plugins) => plugin }}
{{ @if(plugin.globalContext) }}
          <{{ plugin.name | clear | capitalize }}GlobalProvider>
{{ /if }}
{{ /each }}
              <Switch>
                {/* Define each plugin route */}
{{ @each(it.plugins) => plugin }}
{{ @if(plugin.localContext && (plugin.routers.public || plugin.routers.private)) }}
                <{{ plugin.name | clear | capitalize }}LocalProvider>
{{ /if }}
{{ @if(plugin.routers.public) }}
                  <Route path="/{{ plugin.name }}">
                    <{{ plugin.name | clear | capitalize }}Public fallback={<LoadingOverlay visible />} />
                  </Route>
{{ /if }}
{{ @if(plugin.routers.private) }}
                  <Route path="/private/{{ plugin.name }}">
                    <{{ plugin.name | clear | capitalize }}Private fallback={<LoadingOverlay visible />} />
                  </Route>
{{ /if }}
{{ @if(plugin.localContext && (plugin.routers.public || plugin.routers.private)) }}
                </{{ plugin.name | clear | capitalize }}LocalProvider>
{{ /if }}
{{ /each }}
                <Route path="/">
                    <Redirect to={`/private/dashboard`} />
                </Route>
              </Switch>
{{ @each(it.plugins.reverse()) => plugin }}
{{ @if(plugin.globalContext) }}
          </{{ plugin.name | clear | capitalize }}GlobalProvider>
{{ /if }}
{{ /each }}
    </Router>
    <ReactQueryDevtoolsWrapper />
    </QueryClientProvider>
  );
}

export default App;
