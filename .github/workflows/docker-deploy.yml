name: Deploy Docker Frontend(s3,cloudfront) and Backend(ecr,ecs)

on:
  push:
    tags:
      - '*.*.*-dev'

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      S3_BUCKET: ${{ vars.S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      API_URL: ${{ vars.API_URL }}
      SOCKET_PLUGIN: ${{ vars.SOCKET_PLUGIN }}
    steps:
      - name: Set env üîß
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Print name
        run: echo "Hello $NAME."

      - name: Install üîß
        run: yarn install --frozen-lockfile

      - name: Configure AWS credentials üîß
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Build docker config üîß
        working-directory: ./examples/docker
        run: API_URL=$API_URL SOCKET_PLUGIN=$SOCKET_PLUGIN node process.js

      - name: Build Frontend üîß
        working-directory: ./examples/docker
        run: yarn front:build

      - name: Deploy to Cloudfront üöÄ
        uses: lbertenasco/s3-deploy@v1
        with:
          folder: ./examples/docker/build
          bucket: ${{ vars.S3_BUCKET }}
          dist-id: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
          invalidation: / *

      - name: Login to Amazon ECR üîß
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR üöÄ
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ vars.RELEASE_VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
